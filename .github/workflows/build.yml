name: Building, CI Even

on:
  workflow_dispatch:
  push:
    branches:
    - "cmake"
    - "cmake-integration-hell"
    tags:
    - "version-*"

env:
  CMAKE_BUILD_TYPE: RelWithDebInfo
  IMGUI_VERSION: v1.88
  GLFW_VERSION: v3.3.8
  GLM_VERSION: v0.9.9.8
  CDDLIB_VERSION: 0.94m

jobs:
  build-linux:
    runs-on: ubuntu-latest
    if: false

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Apt - Install uncompileable dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install --no-install-recommends -y libglfw3-dev libglm-dev

    - name: CommandLine - Look at ldconfig
      run: sudo ldconfig -p

    - name: Cache - ImGui from source
      id: cache-imgui
      uses: actions/cache@v3.0.11
      with:
        key: version-fc-imgui${{ env.IMGUI_VERSION }}-cddlib${{ env.CDDLIB_VERSION }}
        path: |
          libraries/
          thirdparty/cdd
          thirdparty/cddlib
          thirdparty/imgui
          external_projects/src/imgui-populate-stamp

    # Shamelessly borrowed from an example CMake action. Probably better than I could've done myself
    # ..evidently
    - name: CMake - Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.CMAKE_BUILD_TYPE}}
    - name: CMake - Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.CMAKE_BUILD_TYPE}}

    - name: Actions - Emit artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist-linux
        path: ${{github.workspace}}/build/LPPShow

  # This one will be ran only on non-snapshot builds, since it's slower and more of a PITA
  build-windows:
    runs-on: windows-latest
    if: ${{ !endsWith(github.ref_name, 'snapshot') }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Cache - Windows uncompileable dependencies
      id: cache-windows-thirdparty
      uses: actions/cache@v3.0.11
      with:
        key: thirdparty-ep-cddlib${{ env.CDDLIB_VERSION }}-imgui${{ env.IMGUI_VERSION }}-glfw${{ env.GLFW_VERSION }}-glm${{ env.GLM_VERSION }}
        path: |
          libraries/
          external_projects/

    - name: CMake - Configure
      run: cmake -B ${{github.workspace}}\build -G Ninja -DCMAKE_BUILD_TYPE=${{env.CMAKE_BUILD_TYPE}} -DUSE_BAKED_SHADERS=on
    - name: CMake - Build
      run: cmake --build ${{github.workspace}}\build --config Release

    - name: CommandLine - Look around
      run: tree ${{github.workspace}}\build /F

    - name: Actions - Emit artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist-windows
        path: |
          ${{github.workspace}}\build\Release
          ${{github.workspace}}\build\LPPShow*

  build-macos:
      runs-on: macos-latest
      if: ${{ !endsWith(github.ref_name, 'snapshot') }} # && startsWith(github.ref_name, 'version-') # deeeeeeefinitely not running that

      steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

    # ..i don't know how to handle this.
    # ..it's complicated.
    # ..both with brew and apt.. windows too, to a point.
    # ..we shooould cache them, but also have something that would regenerate them in a user enviroment.
    # ..and not to mention stashing away *all* the dependency chain.
    # ..i don't suppose i could make a sane docker build container.
    # - name: Cache - Brew formulae
    #   id: cache-macos-brew
    #   uses: actions/cache@v3.0.11
    #   with:
    #     key: brew-glfw-cddlib
    #     path: |
    #       /usr/local/Cellar/cddlib
    #       /usr/local/Cellar/cdd
    #       /usr/local/Cellar/glfw

    - name: Brew - Install uncompileable dependencies
      run: |
        brew install glfw cddlib

    - name: Brew - Look around # Because why even bother listing files in a package on the website
      run: brew ls --verbose glfw && brew ls --verbose cddlib

    - name: Cache - MacSoS uncompileable dependencies
      id: cache-macos-thirdparty
      uses: actions/cache@v3.0.11
      with:
        key: thirdparty-ep-imgui${{ env.IMGUI_VERSION }}-glm${{ env.GLM_VERSION }}
        path: |
          libraries/
          external_projects/

    - name: CMake - Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.CMAKE_BUILD_TYPE}} -DUSE_BAKED_SHADERS=on
    - name: CMake - Build
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Actions - Prepare artifact
      run: mkdir ./dist && tar -c -f ./dist/blob-${{github.ref_name}}.tar ${{github.workspace}}/build/*

    - name: Actions - Emit artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist-macos
        path: |
          ${{github.workspace}}/dist/blob-*