[ ] Actual zoom in support
    --  requires some clever thinks with grid scaling
[ ] Actual solution support
    --  the groundwork is kind of there, but needs proper
        implementation. We could also support cddlib's .ine/.ext
        files, those are pretty humanly readable.
    --  Some caveats to consider - the library accepts matrices in
        form of [b a1 a2 a3], fit into x1a1 + x2a2 + x3a3 + b >= 0
        So, coming from our "expected" x1a1 + x2a2 + x3a3 <= b
        form, we'll have to shuffle some values around.
        Additionally, we have to include x1, x2, x3 >= 0
        This could be done by appending last three rows of an 
        eye-matrix to the LP matrix.
    --  At some point, we should think of dynamic signs
        and quite possibly UI simplifications: hide zeroed out
        variables and remove equations.
        For latter, it's best if we collect them into a list,
        and run over it after we finish editing.
[ ] GitHub Actions workflow for crossplatform builds
    --  Probably requires movement towards the likes of CMake
    --  Definitely will hit the rate limit implementing
[ ] "Optimized" limit plane rendering
    Meaning we'll collect the transform matrices into one buffer
    and use that for rendering the planes, instanced.
    Further reading:
    - solver.cpp#L128
    - https://www.khronos.org/opengl/wiki/Buffer_Object_Streaming
    - https://learnopengl.com/Advanced-OpenGL/Instancing
[ ] Updated manual Object generation from vertex data:
    Follow FIXME in solver.cpp#L191
[ ] Object file bake script
( MANY MORE COMING )